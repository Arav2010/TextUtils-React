{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","classname","heading","value","onChange","event","target","rows","disabled","length","console","log","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","defaultProps","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","cls","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.02903cd7.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n    let myStyle = {\r\n        color: props.mode === 'dark'?'white':'#042743',\r\n        backgroundColor: props.mode === 'dark'?'#042743':'white'\r\n    }\r\n\r\n    // const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    // const toggleStyle = () => {\r\n    //     if (myStyle.color == 'black') {\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n    //     }\r\n    //     else {\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'#042743'}}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                           <strong>Analyze Your Text</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            Text-Utils gives you a way to analyze your text quickly and efiiciently. Be it word count, character count or more...\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            <strong>Free To Use</strong> \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            Text Utils is a free character counter tool that provides instant character count and word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            <strong>Browser Compatible</strong> \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            This word counter softwareworks in any web-browser such as Chrome, FireFox, Safari, Microsoft Edge and Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays etc.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        {/* <a className=\"navbar-brand\" href=\"#\">{props.title}</a> */}\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          {/* <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height: '30px', width: '30px', cursor:'pointer'}}></div>\r\n            <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger')}} style={{height: '30px', width: '30px', cursor:'pointer'}}></div>\r\n            <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success')}} style={{height: '30px', width: '30px', cursor:'pointer'}}></div>\r\n            <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning')}} style={{height: '30px', width: '30px', cursor:'pointer'}}></div>\r\n            <div className=\"bg-light rounded mx-2\" onClick={()=>{props.toggleMode('light')}} style={{height: '30px', width: '30px', cursor:'pointer'}}></div>\r\n            <div className=\"bg-dark rounded mx-2\" onClick={()=>{props.toggleMode('dark')}} style={{height: '30px', width: '30px', cursor:'pointer'}}></div>\r\n          </div> */}\r\n          <div className={`form-check form-switch text-${props.mode=== 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={()=>{props.toggleMode(null)}} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n    </nav>\r\n      )\r\n}\r\n\r\n      Navbar.propTypes = {\r\n        title: PropTypes.string,\r\n      aboutText: PropTypes.string\r\n}\r\n\r\n      Navbar.defaultProps = {\r\n        title: 'Set Title Here',\r\n      aboutText: 'About'\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    console.log(\"Uppercase was Clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\" Converted to Uppercase\", \"success\")\r\n  }\r\n  \r\n  const handleLoClick = () => {\r\n    console.log(\"Uppercase was Clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\" Converted to Lowercase\", \"success\")\r\n  } \r\n  \r\n  const handleClearClick = () => {\r\n    console.log(\"Uppercase was Clicked\" + text);\r\n    let newText = '';\r\n    setText(newText)\r\n    props.showAlert(\" Text Cleared\", \"success\")\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  // To Copy Text\r\n  const handleOnClick = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    text.setSelectionRange(0, 9999);\r\n    navigator.clipboard.writeText(text.value);\r\n    document.getSelection().removeAllRanges();\r\n    props.showAlert(\" Copied to Clipboard\", \"success\")\r\n  }\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\" Extra Spaces Removed\", \"success\")\r\n  }\r\n\r\n  const [text, setText] = useState('');\r\n  // setText(\"newtext\");\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color: props.mode=== 'dark'?'white':'black'}}>\r\n      <h2 classname=\"mb-2\">{props.heading}</h2>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode=== 'dark'?'#13466e':'white', color: props.mode=== 'dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n        <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n        <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n        <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n        <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleOnClick}>Copy Text</button>\r\n        <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n\r\n    <div className=\"container my-2\" style={{color: props.mode=== 'dark'?'white':'black'}}>\r\n      <h2>Your Text Summary</h2>\r\n      <p>{text.split(/\\s+/).filter((element)=>{return element.length!=0}).length} words and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!=0}).length} Minutes read</p>\r\n      <h3>Prewiew</h3>\r\n      <p>{text.length>0?text:\"Nothing To Prewiew!\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) =>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  // const removeBodyClasses = ()=>{\n  //   document.body.classList.remove('bg-light')\n  //   document.body.classList.remove('bg-dark')\n  //   document.body.classList.remove('bg-warning')\n  //   document.body.classList.remove('bg-danger')\n  //   document.body.classList.remove('bg-success')\n  // }\n\n  const toggleMode = (cls) => {\n    // removeBodyClasses();\n    // document.body.classList.add('bg-'+cls)\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\" Dark Mode Enabled\", \"success\")\n      // document.title = 'TextUtils - Dark Mode';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\" Light Mode Enabled\", \"success\")\n      // document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"Text-Utils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm showAlert={showAlert} heading=\"Try Text-Utils - Word Counter, Character Counter, Remove Extra Spaces\" mode={mode} />\n            </Route>\n          </Switch>\n      </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}